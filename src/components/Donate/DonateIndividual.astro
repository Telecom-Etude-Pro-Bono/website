---
import {
    getLangFromUrl,
    useTranslatedPath,
    useTranslations,
} from "../../web-data/i18n/utils";


const lang = getLangFromUrl(Astro.url);
const tr = useTranslatedPath(lang);
const t = useTranslations(lang);

const {errors, values} = Astro.props

interface DonateIndividualProps {
    errors: any;
    values: any;
}
---

<div class="container">
    <div class="donate-field-super-container">
    <div class="donate-field-container">
        <label for="lname" class="uppercase bold">{t('donate.form.name')} *</label>
        <input type="text" id="lname" name="lastName" value={values.lastName} required/>
        {errors && errors.lastName && <p class="errors">{errors.lastName}</p>}
    </div>
    <div class="donate-field-container">
        <label for="firstName" class="uppercase bold">{t('donate.form.firstname')} *</label>
        <input type="text" id="firstName" name="firstName" value={values.firstName} required/>
        {errors && errors.firstName && <p class="errors">{errors.firstName}</p>}
    </div>
    </div>
    <div class="donate-field-container">
    <label for="email" class="uppercase bold">{t('donate.form.mail')} *</label>
    <input type="email" id="email" name="email" value={values.email} required/>
    {errors && errors.email && <p class="errors">{errors.email}</p>}
</div>
<div class="donate-field-container">
    <label for="confirm-email"class="uppercase bold">{t('donate.form.confirm-email')} *</label>
    <input type="email" id="confirm-email" name="confirm-email" value={values.confirm_email} required/>
    {errors && errors.confirmEmail && <p class="errors">{errors.confirmEmail}</p>}
</div>
<div class="donate-field-container">
    <label for="phone" class="uppercase bold">{t('donate.form.phone')} *</label>
    <input type="tel" id="phone" name="phone" value={values.phone} required/>
    {errors && errors.phone && <p class="errors">{errors.phone}</p>}
</div>
<div class="donate-field-container">
    <label for="dateOfBirth" class="uppercase bold">{t('donate.form.birthday')} *</label>
    <input type="date" id="birthday" name="dateOfBirth" value={values.dateOfBirth} required/>
    {errors && errors.dateOfBirth && <p class="errors">{errors.dateOfBirth}</p>}
</div>
<div class="donate-field-container">
    <label for="address" class="uppercase bold">{t('donate.form.address')} *</label>
    <input type="text" id="address" name="address" value={values.address} required/>
    {errors && errors.address && <p class="errors">{errors.address}</p>}
</div>
    <div class="donate-field-super-container">
        <div class="donate-field-container">
        <label for="city" class="uppercase bold">{t('donate.form.city')} *</label>
        <input type="text" id="city" name="city" value={values.city} required/>
        {errors && errors.city && <p class="errors">{errors.city}</p>}
    </div>
    <div class="donate-field-container">
        <label for="zip" class="uppercase bold">{t('donate.form.zip')} *</label>
        <input type="text" id="zip" name="zipCode" value={values.zipCode} required/>
        {errors && errors.zipCode && <p class="errors">{errors.zipCode}</p>}
    </div>
    </div>
    <div class="donate-field-container">
    <label for="country" class="uppercase bold">{t('donate.form.country')} *</label>
    <input type="text" id="country" name="country" value={values.country} required/>
    {errors && errors.country && <p class="errors">{errors.country}</p>}
</div>
</div>

<style>
    .container{
        display: flex;
    flex-direction: column;
    align-items: flex-start;
    flex-wrap: wrap;
    }

    .donate-field-super-container{
        display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    flex-wrap: nowrap;
    gap:1rem;
    }


</style>
